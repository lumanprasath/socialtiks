import { EventEmitter, AfterContentInit } from '@angular/core';
/**
 * # WizardComponent
 * @version 2.0.0
 * @author: Fl√°vio Silva
 * @link: [https://github.com/fssolutions/ng2-wizard](https://github.com/fssolutions/ng2-wizard)
 *
 * Component Wizard(step to step with tabs) for Angular 2.
 *```
 *<wizard orientation="string [landscape|portrait]" hiddenTabs="string [yes|no]" disableTabs="string [yes|no]" disableSteps="Array [number]" hiddenDisableSteps="string [yes|no]" currentStep="int [number]" (stepChange)="onYourFunction($event)">
 *```
 *
 * ## Example
 * ### Template (.html)
 *```
 * <wizard orientation="portrait">
 *  <wizard-step>
 *    <wizard-step-tab>Title of first tab</wizard-step-tab>
 *    Hello World
 *  </wizard-step>
 * </wizard>
 *```
 * ### TypeScript (.ts)
 * Import WizardComponent and WizardStepComponent
 *```
 * import { WizardComponent, WizardStepComponent } from 'ng2-wizard';
 *```
 *
 * Add in your directives
 *```
 * directives: [WizardStepComponent, WizardComponent]
 *```
 */
export declare class WizardComponent implements AfterContentInit {
    private version;
    /**
     * @property {object}   defaults                       - The default values for wizard.
     * @property {string}   defaults.orientation           - The default orientation.
     * @property {boolean}  defaults.disableTabs           - The default disableTabs.
     * @property {array}    defaults.disableTabsAt         - The default tabs disabled.
     * @property {boolean}  defaults.hiddenTabs            - The default hiddenTabs.
     * @property {number}   defaults.currentStep           - The default current step.
     * @property {number}   defaults.hiddenDisableSteps    - The default hiddenDisableSteps.
     */
    private defaults;
    private wizardSteps;
    /**
     * Set or get orientation of the navegation tab position
     * @params orientation {string} ["portrait","landscape"] - Orientation of the navegation;
     *
     * ### Example
     * #### Attribute (.html)
     * Implements in your html
     * ```
     *  <wizard orientation="portrait|landscape">
     * ```
     *
     * #### TypeScript (.ts)
     * Implements in your file controller
     * ```
     *  @ViewChild(WizardComponent) mWizard: WizardComponent;
     *  toggleTabOrientation(){
     *    console.info("hiddenTabs tabs:", this.mWizard.orientation);
     *    this.mWizard.orientation = mWizard.orientation == 'portrait' ? 'landscape' : 'portrait';
     *  }
     * ```
     * @return {string} ["portrait","landscape"]
     */
    orientation: string;
    /**
     * Active manual steps(tabs) navegation;
     *
     * ### Example
     * #### Attribute (.html)
     * Implements in your html
     * ```
     *  <wizard disableTabs="yes|no">
     * ```
     *
     * #### TypeScript (.ts)
     * Implements in your file controller
     * ```
     *  @ViewChild(WizardComponent) mWizard: WizardComponent;
     *  toggleNavigationMode(){
     *    console.info("is disable tabs:", this.mWizard.disableTabs);
     *    this.mWizard.disableTabs = !this.mWizard.disableTabs;
     *    // or mWizard.disableTabs = mWizard.disableTabs ? false : true;
     *    console.info("is disable tabs:", this.mWizard.disableTabs);
     *  }
     * ```
     * @return {boolean} - Navegation tab is enabled
     */
    disableTabs: any;
    /**
     * Hidden tabs navegation;
     *
     * ### Example
     * #### Attribute (.html)
     * Implements in your html
     * ```
     *  <wizard hiddenTabs="yes|no">
     * ```
     *
     * #### TypeScript (.ts)
     * Implements in your file controller
     * ```
     *  @ViewChild(WizardComponent) mWizard: WizardComponent;
     *  toggleVisibleTab(){
     *    console.info("hiddenTabs tabs:", this.mWizard.hiddenTabs);
     *    mWizard.hiddenTabs = !this.mWizard.hiddenTabs;
     *    // or mWizard.hiddenTabs = this.mWizard.hiddenTabs ? false : true;
     *    console.info("hiddenTabs tabs:", this.mWizard.hiddenTabs);
     *  }
     * ```
     * @return {boolean} - Navegation tab is show
     */
    hiddenTabs: any;
    /**
     * Disable specific tabs navegation;
     *
     * ### Example
     * #### Attribute (.html)
     * Implements in your html
     * ```
     *  <wizard [disableSteps]="[2,4]">
     * ```
     *
     * #### TypeScript (.ts)
     * Implements in your file controller
     * ```
     *  @ViewChild(WizardComponent) mWizard: WizardComponent;
     *  toggleNavigationMode(){
     *    console.info("is disable steps:", this.mWizard.disableSteps);
     *    this.mWizard.disableSteps = [2,4,5];
     *    console.info("is disable steps:", this.mWizard.disableSteps);
     *  }
     * ```
     * @return {boolean} - Navegation tab is enabled
     */
    disableSteps: Array<number>;
    /**
     * Hide navigation when step disabled;
     *
     * ### Example
     * #### Attribute (.html)
     * Implements in your html
     * ```
     *  <wizard [hiddenDisableSteps]="[yes|no|true|false]">
     * ```
     *
     * #### TypeScript (.ts)
     * Implements in your file controller
     * ```
     *  @ViewChild(WizardComponent) mWizard: WizardComponent;
     *  toggleNavigationMode(){
     *    console.info("show steps:", this.mWizard.hiddenDisableSteps);
     *    this.mWizard.hiddenDisableSteps = true;
     *    console.info("show steps:", this.mWizard.hiddenDisableSteps);
     *  }
     * ```
     * @return {boolean} - Show tab when disabled
     */
    hiddenDisableSteps: any;
    /**
     * Set or Get current step
     * @return {number} - Current number step
     *
     * ### Example
     * #### Attribute (.html)
     * Implements in your html
     * ```
     *  <wizard currentStep="1">
     * ```
     *
     * #### TypeScript (.ts)
     * Implements in your file controller [see setcurrentTab]{@link #setcurrentTab()}
     * ```
     *  @ViewChild(WizardComponent) mWizard: WizardComponent;
     *  nextStep(){
     *    console.info("Current Step:", this.mWizard.currentStep);
     *    this.mWizard.currentStep++;
     *    // or mWizard.currentStep = this.mWizard.currentStep + 1;
     *    console.info("Current Step:", this.mWizard.currentStep);
     *  }
     * ```
     */
    currentStep: number;
    /**
     * Return Object
     * @params {boolean} isTab - Action when clicked in tab;
     * @params {number} currentStep - Current index step;
     * @event WizardComponent#stepChange
     *
     * Fire event when change current step
     * ### Example
     * #### Template (.html)
     * Implements in your html
     * ```
     *  <wizard (stepChange)="onStepChange($event)">
     * ```
     *
     * #### TypeScript (.ts)
     * Implements in your file controller
     * ```
     *  onTabChange(opt){
     *    console.info("Change in tab ? ", opt.isTab);
     *    console.info("Current step: ", opt.currentStep);
     *  }
     * ```
     */
    stepChange: EventEmitter<any>;
    /**
     * Set current number step
     *
     * ### Example
     * #### TypeScript (.ts)
     * Implements in your file controller
     * ```
     *  @ViewChild(WizardComponent) mWizard: WizardComponent;
     *  setStep(){
     *    this.mWizard.setCurrentStep(1);
     *  }
     * ```
     */
    setCurrentStep(index: number): void;
    /**
     * Disable specific step
     * @params {number} index - Add index to disable tab
     *
     * ### Example
     * #### TypeScript (.ts)
     * Implements in your file controller
     * ```
     *  @ViewChild(WizardComponent) mWizard: WizardComponent;
     *  denyStep(){
     *    this.mWizard.addDisabledSteps(1);
     *  }
     * ```
     */
    addDisabledSteps(index: number): void;
    /**
     * Remove disable specific step
     * @params {number} index - Remove index to disable tab
     *
     * ### Example
     * #### TypeScript (.ts)
     * Implements in your file controller
     * ```
     *  @ViewChild(WizardComponent) mWizard: WizardComponent;
     *  allowStep(){
     *    this.mWizard.removeDisabledSteps(1);
     *  }
     * ```
     */
    removeDisabledSteps(index: number): void;
    /**
     * Disable specific steps
     * @params {Array<number>} index - Add index to disable tab
     *
     * ### Example
     * #### TypeScript (.ts)
     * Implements in your file controller
     * ```
     *  @ViewChild(WizardComponent) mWizard: WizardComponent;
     *  denySteps(){
     *    this.mWizard.setDisabledSteps([1,2]);
     *  }
     * ```
     */
    setDisabledSteps(indexs: Array<number>): void;
    ngAfterContentInit(): void;
    private inArray(ar, key);
    private getRealIndex(index);
    private hideAllContainer();
    private setPanel(index, isTab?);
    private errorMessage(m, o?);
}
