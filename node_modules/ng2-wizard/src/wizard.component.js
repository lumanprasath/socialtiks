"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var wizard_step_component_1 = require("./wizard-step.component");
/**
 * # WizardComponent
 * @version 2.0.0
 * @author: Fl√°vio Silva
 * @link: [https://github.com/fssolutions/ng2-wizard](https://github.com/fssolutions/ng2-wizard)
 *
 * Component Wizard(step to step with tabs) for Angular 2.
 *```
 *<wizard orientation="string [landscape|portrait]" hiddenTabs="string [yes|no]" disableTabs="string [yes|no]" disableSteps="Array [number]" hiddenDisableSteps="string [yes|no]" currentStep="int [number]" (stepChange)="onYourFunction($event)">
 *```
 *
 * ## Example
 * ### Template (.html)
 *```
 * <wizard orientation="portrait">
 *  <wizard-step>
 *    <wizard-step-tab>Title of first tab</wizard-step-tab>
 *    Hello World
 *  </wizard-step>
 * </wizard>
 *```
 * ### TypeScript (.ts)
 * Import WizardComponent and WizardStepComponent
 *```
 * import { WizardComponent, WizardStepComponent } from 'ng2-wizard';
 *```
 *
 * Add in your directives
 *```
 * directives: [WizardStepComponent, WizardComponent]
 *```
 */
var WizardComponent = (function () {
    function WizardComponent() {
        this.version = "1.0.3.0";
        /**
         * @property {object}   defaults                       - The default values for wizard.
         * @property {string}   defaults.orientation           - The default orientation.
         * @property {boolean}  defaults.disableTabs           - The default disableTabs.
         * @property {array}    defaults.disableTabsAt         - The default tabs disabled.
         * @property {boolean}  defaults.hiddenTabs            - The default hiddenTabs.
         * @property {number}   defaults.currentStep           - The default current step.
         * @property {number}   defaults.hiddenDisableSteps    - The default hiddenDisableSteps.
         */
        this.defaults = {
            orientation: "landscape",
            disableTabs: false,
            hiddenTabs: false,
            currentTab: 0,
            disableSteps: [-1],
            hiddenDisableSteps: false
        };
        //Event Listeners
        /**
         * Return Object
         * @params {boolean} isTab - Action when clicked in tab;
         * @params {number} currentStep - Current index step;
         * @event WizardComponent#stepChange
         *
         * Fire event when change current step
         * ### Example
         * #### Template (.html)
         * Implements in your html
         * ```
         *  <wizard (stepChange)="onStepChange($event)">
         * ```
         *
         * #### TypeScript (.ts)
         * Implements in your file controller
         * ```
         *  onTabChange(opt){
         *    console.info("Change in tab ? ", opt.isTab);
         *    console.info("Current step: ", opt.currentStep);
         *  }
         * ```
         */
        this.stepChange = new core_1.EventEmitter();
    }
    Object.defineProperty(WizardComponent.prototype, "orientation", {
        get: function () {
            return this.defaults.orientation;
        },
        /**
         * Set or get orientation of the navegation tab position
         * @params orientation {string} ["portrait","landscape"] - Orientation of the navegation;
         *
         * ### Example
         * #### Attribute (.html)
         * Implements in your html
         * ```
         *  <wizard orientation="portrait|landscape">
         * ```
         *
         * #### TypeScript (.ts)
         * Implements in your file controller
         * ```
         *  @ViewChild(WizardComponent) mWizard: WizardComponent;
         *  toggleTabOrientation(){
         *    console.info("hiddenTabs tabs:", this.mWizard.orientation);
         *    this.mWizard.orientation = mWizard.orientation == 'portrait' ? 'landscape' : 'portrait';
         *  }
         * ```
         * @return {string} ["portrait","landscape"]
         */
        set: function (format) {
            this.defaults.orientation = format;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(WizardComponent.prototype, "disableTabs", {
        get: function () {
            return this.defaults.disableTabs;
        },
        /**
         * Active manual steps(tabs) navegation;
         *
         * ### Example
         * #### Attribute (.html)
         * Implements in your html
         * ```
         *  <wizard disableTabs="yes|no">
         * ```
         *
         * #### TypeScript (.ts)
         * Implements in your file controller
         * ```
         *  @ViewChild(WizardComponent) mWizard: WizardComponent;
         *  toggleNavigationMode(){
         *    console.info("is disable tabs:", this.mWizard.disableTabs);
         *    this.mWizard.disableTabs = !this.mWizard.disableTabs;
         *    // or mWizard.disableTabs = mWizard.disableTabs ? false : true;
         *    console.info("is disable tabs:", this.mWizard.disableTabs);
         *  }
         * ```
         * @return {boolean} - Navegation tab is enabled
         */
        set: function (status) {
            if (typeof status == "boolean") {
                this.defaults.disableTabs = status;
                return;
            }
            if (typeof status == "string") {
                this.defaults.disableTabs = status == "yes";
                return;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WizardComponent.prototype, "hiddenTabs", {
        get: function () {
            return this.defaults.hiddenTabs || false;
        },
        /**
         * Hidden tabs navegation;
         *
         * ### Example
         * #### Attribute (.html)
         * Implements in your html
         * ```
         *  <wizard hiddenTabs="yes|no">
         * ```
         *
         * #### TypeScript (.ts)
         * Implements in your file controller
         * ```
         *  @ViewChild(WizardComponent) mWizard: WizardComponent;
         *  toggleVisibleTab(){
         *    console.info("hiddenTabs tabs:", this.mWizard.hiddenTabs);
         *    mWizard.hiddenTabs = !this.mWizard.hiddenTabs;
         *    // or mWizard.hiddenTabs = this.mWizard.hiddenTabs ? false : true;
         *    console.info("hiddenTabs tabs:", this.mWizard.hiddenTabs);
         *  }
         * ```
         * @return {boolean} - Navegation tab is show
         */
        set: function (status) {
            if (typeof status == "boolean") {
                this.defaults.hiddenTabs = status;
                return;
            }
            if (typeof status == "string") {
                this.defaults.hiddenTabs = status == "yes";
                return;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WizardComponent.prototype, "disableSteps", {
        get: function () {
            return this.defaults.disableSteps;
        },
        /**
         * Disable specific tabs navegation;
         *
         * ### Example
         * #### Attribute (.html)
         * Implements in your html
         * ```
         *  <wizard [disableSteps]="[2,4]">
         * ```
         *
         * #### TypeScript (.ts)
         * Implements in your file controller
         * ```
         *  @ViewChild(WizardComponent) mWizard: WizardComponent;
         *  toggleNavigationMode(){
         *    console.info("is disable steps:", this.mWizard.disableSteps);
         *    this.mWizard.disableSteps = [2,4,5];
         *    console.info("is disable steps:", this.mWizard.disableSteps);
         *  }
         * ```
         * @return {boolean} - Navegation tab is enabled
         */
        set: function (indexs) {
            if (typeof indexs != 'object')
                return;
            this.defaults.disableSteps = indexs;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(WizardComponent.prototype, "hiddenDisableSteps", {
        get: function () {
            return this.defaults.hiddenDisableSteps;
        },
        /**
         * Hide navigation when step disabled;
         *
         * ### Example
         * #### Attribute (.html)
         * Implements in your html
         * ```
         *  <wizard [hiddenDisableSteps]="[yes|no|true|false]">
         * ```
         *
         * #### TypeScript (.ts)
         * Implements in your file controller
         * ```
         *  @ViewChild(WizardComponent) mWizard: WizardComponent;
         *  toggleNavigationMode(){
         *    console.info("show steps:", this.mWizard.hiddenDisableSteps);
         *    this.mWizard.hiddenDisableSteps = true;
         *    console.info("show steps:", this.mWizard.hiddenDisableSteps);
         *  }
         * ```
         * @return {boolean} - Show tab when disabled
         */
        set: function (status) {
            if (typeof status == "boolean") {
                this.defaults.hiddenDisableSteps = status;
                return;
            }
            if (typeof status == "string") {
                this.defaults.hiddenDisableSteps = status == "yes";
                return;
            }
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(WizardComponent.prototype, "currentStep", {
        get: function () { return this.defaults.currentTab; },
        /**
         * Set or Get current step
         * @return {number} - Current number step
         *
         * ### Example
         * #### Attribute (.html)
         * Implements in your html
         * ```
         *  <wizard currentStep="1">
         * ```
         *
         * #### TypeScript (.ts)
         * Implements in your file controller [see setcurrentTab]{@link #setcurrentTab()}
         * ```
         *  @ViewChild(WizardComponent) mWizard: WizardComponent;
         *  nextStep(){
         *    console.info("Current Step:", this.mWizard.currentStep);
         *    this.mWizard.currentStep++;
         *    // or mWizard.currentStep = this.mWizard.currentStep + 1;
         *    console.info("Current Step:", this.mWizard.currentStep);
         *  }
         * ```
         */
        set: function (index) {
            this.defaults.currentTab = this.getRealIndex(parseInt("" + index));
            //if change date
            if (this.wizardSteps != null && this.wizardSteps.length > 0) {
                this.setPanel(this.defaults.currentTab);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Set current number step
     *
     * ### Example
     * #### TypeScript (.ts)
     * Implements in your file controller
     * ```
     *  @ViewChild(WizardComponent) mWizard: WizardComponent;
     *  setStep(){
     *    this.mWizard.setCurrentStep(1);
     *  }
     * ```
     */
    WizardComponent.prototype.setCurrentStep = function (index) {
        this.setPanel(this.getRealIndex(index));
    };
    /**
     * Disable specific step
     * @params {number} index - Add index to disable tab
     *
     * ### Example
     * #### TypeScript (.ts)
     * Implements in your file controller
     * ```
     *  @ViewChild(WizardComponent) mWizard: WizardComponent;
     *  denyStep(){
     *    this.mWizard.addDisabledSteps(1);
     *  }
     * ```
     */
    WizardComponent.prototype.addDisabledSteps = function (index) {
        if (this.inArray(this.defaults.disableSteps, index))
            return;
        this.defaults.disableSteps.push(index);
    };
    /**
     * Remove disable specific step
     * @params {number} index - Remove index to disable tab
     *
     * ### Example
     * #### TypeScript (.ts)
     * Implements in your file controller
     * ```
     *  @ViewChild(WizardComponent) mWizard: WizardComponent;
     *  allowStep(){
     *    this.mWizard.removeDisabledSteps(1);
     *  }
     * ```
     */
    WizardComponent.prototype.removeDisabledSteps = function (index) {
        if (this.inArray(this.defaults.disableSteps, index))
            return;
        var i = this.defaults.disableSteps.indexOf(index);
        if (i > -1)
            this.defaults.disableSteps.splice(i, 1);
    };
    /**
     * Disable specific steps
     * @params {Array<number>} index - Add index to disable tab
     *
     * ### Example
     * #### TypeScript (.ts)
     * Implements in your file controller
     * ```
     *  @ViewChild(WizardComponent) mWizard: WizardComponent;
     *  denySteps(){
     *    this.mWizard.setDisabledSteps([1,2]);
     *  }
     * ```
     */
    WizardComponent.prototype.setDisabledSteps = function (indexs) {
        if (typeof indexs != 'object')
            return;
        this.defaults.disableSteps = indexs;
    };
    WizardComponent.prototype.ngAfterContentInit = function () {
        if (this.wizardSteps.length == 0) {
            this.errorMessage('WizardComponent not found view childrens');
        }
        this.setPanel(this.getRealIndex(this.defaults.currentTab));
    };
    WizardComponent.prototype.inArray = function (ar, key) {
        return !!ar.find(function (x) { return x == key; });
    };
    WizardComponent.prototype.getRealIndex = function (index) {
        if (this.wizardSteps == null)
            return index;
        var i = index > this.defaults.currentTab ? 1 : -1;
        var nindex = index;
        while (this.inArray(this.defaults.disableSteps, nindex)
            && nindex >= 0
            && nindex <= this.wizardSteps.length) {
            nindex += i;
        }
        ;
        if (nindex == 0)
            return 0;
        if (nindex == this.wizardSteps.length)
            return this.defaults.currentTab;
        return nindex;
    };
    WizardComponent.prototype.hideAllContainer = function () {
        this.wizardSteps.forEach(function (step) {
            step.isActive = false;
        });
    };
    WizardComponent.prototype.setPanel = function (index, isTab) {
        if (isTab === void 0) { isTab = false; }
        if ((this.defaults.disableTabs && isTab) || this.wizardSteps == null || this.inArray(this.defaults.disableSteps, index)) {
            return;
        }
        if (index >= this.wizardSteps.length)
            this.defaults.currentTab = this.wizardSteps.length - 1;
        else if (index < 0)
            this.defaults.currentTab = 0;
        else
            this.defaults.currentTab = index;
        this.stepChange.emit({ currentStep: index, isTab: isTab });
        this.hideAllContainer();
        this.wizardSteps.toArray()[this.currentStep].isActive = true;
    };
    WizardComponent.prototype.errorMessage = function (m, o) {
        if (o === void 0) { o = null; }
        switch (arguments.length) {
            case 1:
                console.error('WizardComponet Error:', { Message: m, Version: this.version });
                break;
            case 2:
                console.error('WizardComponet Error:', { Message: m, Object: o, Version: this.version });
                break;
        }
    };
    return WizardComponent;
}());
__decorate([
    core_1.ContentChildren(wizard_step_component_1.WizardStepComponent),
    __metadata("design:type", core_1.QueryList)
], WizardComponent.prototype, "wizardSteps", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], WizardComponent.prototype, "orientation", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], WizardComponent.prototype, "disableTabs", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], WizardComponent.prototype, "hiddenTabs", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], WizardComponent.prototype, "disableSteps", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], WizardComponent.prototype, "hiddenDisableSteps", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], WizardComponent.prototype, "currentStep", null);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], WizardComponent.prototype, "stepChange", void 0);
WizardComponent = __decorate([
    core_1.Component({
        selector: 'wizard',
        styles: ["\n      .wizard {\n      \tdisplay: block;\n      }\n\n      \t\t.wizard-portrait .step {\n      \t\t\t\tpadding-top: 0px !important;\n      \t\t}\n\n      .wizard nav {\n      \tdisplay: -webkit-flex;\n      \tdisplay: flex;\n      \tborder-bottom: 1px solid #ddd;\n      }\n\n      \t\t.wizard nav.hidden {\n      \t\t\t\tdisplay: none !important;\n      \t\t}\n\n      .wizard nav label {\n      \tpadding-bottom: 5px;\n      \tpadding-left: 15px;\n      \tpadding-right: 15px;\n      \tpadding-top: 5px;\n      \tmargin-bottom: 0px;\n      \tposition: relative;\n      \tfont-weight: normal !important;\n      \tborder-bottom: 6px solid transparent;\n      \t\t\t\tborder-top: 6px solid transparent;\n      \t\t\t\toverflow: hidden;\n      \t\t\t\ttext-overflow: ellipsis;\n      \t\t\t\twhite-space: nowrap;\n      }\n\n      .wizard nav label.active,\n      .wizard nav label.enable:hover {\n      \tbackground-color: rgb(245, 245, 245);\n      \tborder-bottom: 6px solid rgb(82, 145, 245);\n      \tcursor: pointer;\n      }\n\n      \t\t.wizard nav label.disabled {\n      \t\t\t\tcursor: not-allowed;\n      \t\t}\n\n      .wizard-portrait {\n      \tdisplay: -webkit-flex;\n      \tdisplay: flex;\n      }\n\n      .wizard-portrait nav {\n      \tdisplay: inline-block;\n      \t-webkit-flex: 1;\n      \t-ms-flex: 1;\n      \tflex: 1;\n      \toverflow: hidden;\n      \tborder-bottom: none;\n      }\n\n      .wizard-portrait > div {\n      \t-webkit-flex: 4;\n      \t-ms-flex: 4;\n      \tflex: 4;\n      }\n\n      .wizard-portrait nav label {\n      \tdisplay: block;\n      \tborder-left: 6px solid transparent !important;\n      }\n\n      .wizard-portrait nav label.active,\n      .wizard-portrait nav label.enable:hover {\n      \tbackground-color: rgb(245, 245, 245);\n      \tborder-bottom-color: transparent !important;\n      \tborder-left: 6px solid rgb(82, 145, 245) !important;\n      \tcursor: pointer;\n      }\n\n      .wizard-portrait nav label:hover::after,\n      .wizard-portrait nav label.active::after {\n      \tdisplay: block;\n      \twidth: 20px;\n      \theight: 20px;\n      \tbackground: white;\n      \tcontent: ' ';\n      \tposition: absolute;\n      \tright: -10px;\n      \ttop: 5px;\n      \t-webkit-transform: rotate(45deg);\n      }\n    "],
        template: "\n      <div class='wizard' [class.wizard-portrait]=\"(defaults.orientation == 'portrait')\">\n      \t<nav *ngIf=\"!defaults.hiddenTabs\">\n      \t\t <label *ngFor=\"let ws of wizardSteps; let i = index\" [ngClass]=\"{enable: !defaults.disableTabs && !inArray(defaults.disableSteps, i), disabled: inArray(defaults.disableSteps, i), active: ws.isActive, hidden: (defaults.hiddenDisableSteps && inArray(defaults.disableSteps, i))}\" (click)=\"setPanel(i, true)\" [innerHTML]=\"ws.tabName\"></label>\n      \t</nav>\n      \t\t<div class='wizard-content'>\n      \t\t\t\t<ng-content></ng-content>\n      \t\t</div>\n      </div>\n    "
    })
], WizardComponent);
exports.WizardComponent = WizardComponent;
//# sourceMappingURL=wizard.component.js.map