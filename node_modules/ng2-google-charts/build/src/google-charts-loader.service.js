"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var GoogleChartsLoaderService = (function () {
    function GoogleChartsLoaderService() {
        this.chartPackage = {
            'AnnotationChart': 'annotationchart',
            'AreaChart': 'corechart',
            'Bar': 'bar',
            'BarChart': 'corechart',
            'BubbleChart': 'corechart',
            'Calendar': 'calendar',
            'CandlestickChart': 'corechart',
            'ColumnChart': 'corechart',
            'ComboChart': 'corechart',
            'PieChart': 'corechart',
            'Gantt': 'gantt',
            'Gauge': 'gauge',
            'GeoChart': 'geochart',
            'Histogram': 'corechart',
            'Line': 'line',
            'LineChart': 'corechart',
            'Map': 'map',
            'OrgChart': 'orgChart',
            'Sankey': 'sankey',
            'Scatter': 'scatter',
            'ScatterChart': 'corechart',
            'SteppedAreaChart': 'corechart',
            'Table': 'table',
            'Timeline': 'timeline',
            'TreeMap': 'treemap',
            'WordTree': 'wordtree',
        };
    }
    GoogleChartsLoaderService.prototype.load = function (chartType) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            google.charts.load('45', {
                'packages': [_this.chartPackage[chartType]],
                'callback': resolve
            });
        });
    };
    GoogleChartsLoaderService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], GoogleChartsLoaderService);
    return GoogleChartsLoaderService;
}());
exports.GoogleChartsLoaderService = GoogleChartsLoaderService;
